---
title: Main Analysis
toc: true
number-sections: true
format:
  html:
    code-fold: true

jupyter: python3
---


```{python}
import pandas as pd
import numpy as np
import requests
from pandas import Series, DataFrame
import matplotlib.pyplot as plt
from matplotlib import rcParams
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objs as go
plt.rc('font', size=10)
%matplotlib inline
```

# Sample Data


```{python}
vaccine_df = pd.read_csv("dataset/country_vaccinations.csv")
vaccine_df.head(5)
```


```{python}
summary_df = pd.read_csv("dataset/worldometer_coronavirus_summary_data.csv")
summary_df.head(5)
```

```{python}
summary_df.info()
```

```{python}
daily_df = pd.read_csv("dataset/worldometer_coronavirus_daily_data.csv")
daily_df.head(5)
```

```{python}
def aggregate(df: pd.Series, agg_col: str) -> pd.DataFrame:

    data = df.groupby("country")[agg_col].max()
    data = pd.DataFrame(data)

    return data
print([x for x in vaccine_df.country.unique() if x not in summary_df.country.unique()])
```

```{python}
print([x for x in vaccine_df.country.unique() if x not in summary_df.country.unique()])
```

```{python}
vaccine_df.country = vaccine_df.country.replace().replace({
    "Czechia": "Czech Republic", 
    "United States": "USA", 
    "United Kingdom": "UK", 
    "Isle of Man": "Isle Of Man",
    "Republic of Ireland": "Ireland",
    "Northern Cyprus" : "Cyprus"
})
 
#These 4 countries are a part of UK
vaccine_df = vaccine_df[vaccine_df.country.apply(lambda x: x not in ['England', 'Scotland', 'Wales', 'Northern Ireland'])]
```

# Setting

In the following Analysis we  examine how effective Covid-19 vaccines are at protecting people against risk of dying from Covid-19. Vaccine effectiveness have shown that receiving 2-3 doses of COVID-19 vaccine can reduce severe COVID-19 outcomes. A study that looked at outcomes among hospitalized patients during March - June 2022 found that Covid-19 was associated with a 90% reduction in risk for severe Covid-19 outcomes, including invasive mechanical ventilation and in-hospital deaths across variant periods.Vaccinated people who died were likely to be older, more likely to be immunocompromised and had more chronic medical conditions compared with unvaccinated case-patients.


# Death Rate Analysis

```{python}
px.scatter(summary_df.head(20), x='continent',y='total_deaths',
           hover_data=['country', 'continent'],
           color='total_deaths', size='total_deaths', size_max=40, log_y=True)
```

- The graph shows that the continent with the most Covid-19 related deaths is South America, followed by Europe then Asia. 
- North America had the least number of deaths.
 
- On 13 May 2020, it was reported that Latin America and the Caribbean had reported over 400,000 cases of COVID-19 infection with, 23,091 deaths. On 22 May 2020, citing the rapid - - increase of infections in Brazil, the World Health Organization declared South America the epicentre of the pandemic.[4][5]
 
- As of 16 July 2021, South America had recorded 34,359,631 confirmed cases and 1,047,229 deaths from COVID-19. Due to a shortage of testing and medical facilities, it is believed that the outbreak is far larger than the official numbers show.
 

Reference: https://en.wikipedia.org/wiki/COVID-19_pandemic_in_South_America


# Death rate by Country 

```{python}
# Country wise deaths
px.bar(summary_df,x="country", y="total_deaths", height=400)
```

```{python}
#We will create an aggregated dataset by aggreagting the required columns using previous function.
summary_cols = ['people_vaccinated', 
                     'people_vaccinated_per_hundred', 
                     'people_fully_vaccinated', 
                     'people_fully_vaccinated_per_hundred', 
                     'total_vaccinations_per_hundred', 
                     'total_vaccinations']
 
summary = summary_df.set_index("country")
vaccines = vaccine_df[['country', 'vaccines']].drop_duplicates().set_index('country')
summary = summary.join(vaccines)
 
for col in summary_cols:   
   summary = summary.join(aggregate(vaccine_df, col))
 
#Two aditional columns for better understanding
summary['percentage_vaccinated'] = summary.people_vaccinated / summary.population * 100
summary['tested_positive'] = summary.total_confirmed / summary.total_tests * 100
```

```{python}
px.scatter(summary, x="people_fully_vaccinated", y="total_deaths", height=400)
```


- The top 5 countries with the highest deaths are USA, Brazil, India, Mexico and Russia . from the below plot we can see.. that in the 0 people_fully_vaccinated, shows much deaths


```{python}
vaccinated_vs_deaths = summary[["people_fully_vaccinated", "total_deaths"]].reset_index()
px.scatter(vaccinated_vs_deaths, x="people_fully_vaccinated", y="total_deaths", height=400, color = "country")
```


The scattter plot shows that more deaths were recorded for countries with less vaccinations.
- For example USA had 217M people vaccinated and recorded one of the highest death rate values, whereas China has over 1.2b people vaccinated and fewer deaths recorded.


```{python}
px.choropleth(vaccine_df,
              locations="iso_code",
              color="people_vaccinated",
              hover_name="country",
              color_continuous_scale="Blues",
              animation_frame="date")
```

Press play on the map key to see the changes of Vccination rates in different countries as it changed over time


```{python}
def fill_title_and_subtitle(title:str, subtitle:str):
    return f"{title}<br><sub>{subtitle}</sub>"
 
def create_bar_chart(data: pd.DataFrame, xcolumn: str, ycolumn:str, title:str, colors:str, ylabel="Count", n=None):
    hovertemplate ='<br><b>%{x}</b>'+f'<br><b>{ylabel}: </b>'+'%{y}<br><extra></extra>'    
    data = data.sort_values(ycolumn, ascending=False).dropna(subset=[ycolumn])        

    if n is not None: 
        data = data.iloc[:n]
    else:
        n = ""
    fig = go.Figure(go.Bar(
                    hoverinfo='skip',
                     x=data[xcolumn], 
                     y=data[ycolumn], 
                     hovertemplate = hovertemplate,
                     marker=dict(
                         color = data[ycolumn],
                         colorscale=colors,
                        ),
                    ),
                )

    fig.update_layout(
        title=title,
        xaxis_title=f"Top {n} {xcolumn.title()}",
        yaxis_title=ylabel,
        plot_bgcolor='rgba(0,0,0,0)',
        hovermode="x"
    )

    fig.show()
```

```{python}
title = fill_title_and_subtitle("Total Deaths", "Countries with Highest Percentages of total deaths")
# create_bar_chart(summary.reset_index(), 'country', "total_vaccinations", title, "viridis", n=20 )
title =("Total Vaccinated")
create_bar_chart(summary.reset_index(), 'country', "total_vaccinations", title, "viridis", n=20 )
```


- The above graph shows that top 5 vaccinated countries are China, India, USA, Brazil and Indonesia.
- Its very interesting, to see that China where the pandemic started is also the country with the most people vaccinated.

```{python}
title = fill_title_and_subtitle("Total Deaths", "Countries with Highest Percentages of total deaths")
create_bar_chart(summary.reset_index(), 'country', "total_deaths", title, "twilight", n=20 )
```

The countries with the most deaths are USA, Brazil, India and Russia

```{python}
title = fill_title_and_subtitle("Percentage Vaccinated", "Countries with Highest Percentages of total population")
create_bar_chart(summary.reset_index(), 'country', "percentage_vaccinated", title, "Blugrn", n=20 )
```


It is better to merge the Vaccination(vaccine_df) and Daily Cases (summary_df) datasets. Before combining, an aggregate of each column must be created to have aggregate data (In vaccine dataset, as noticed above, data is present for each country on each date.)

```{python}
data = summary.dropna(subset=['serious_or_critical'])
data = data.reset_index()
title = fill_title_and_subtitle("Serious or Critical Cases", "Number of people who are currently critically ill due to Covid-19")
create_bar_chart(data, 'country',"serious_or_critical", title, "turbid", n=20)
```

Countries with top critical cases are Brazil, Mexico and  Indonesia

```{python}
title = ("Death Rates")
data = summary_df.copy()
data['death_rate'] =  (data['total_deaths']/data['total_confirmed'])*100
data = data.dropna(subset=['death_rate'])
fig = px.scatter_geo(data, locations="country", color="continent",
locationmode='country names',
hover_name="country", size="death_rate",
projection="natural earth")
fig.update_layout(title=title, title_x=0.45)
fig.show()
```

# Understanding Covid-19 vaccination with respect to time

```{python}
import math
import warnings
warnings.filterwarnings("ignore")
# unique dates 
dates = vaccine_df.date.unique().tolist()
#For more smoother animations
dates.extend(['2020-12-12', '2020-12-13']) 
 
# unique countries 
countries = vaccine_df.country.unique().tolist()
 
# for easy processing 
short = vaccine_df[['date', 'country', 'total_vaccinations']]
 
# values of unqiue (date, country) already in short 
# i.e we want to make sure we have some data for each, even if it is 0 
keys= list(zip(short.date.tolist(), short.country.tolist()))
for date in dates:
    for country in countries:
        idx = (date, country)
        if idx not in keys:
            if date == min(dates):
                # this means there's no entry for {country} on the earliest date 
                short = short.append({
                    "date": date, 
                    "country": country, 
                    "total_vaccinations": 0
                }, ignore_index=True)
            else:
                # entry for {country} is missing on a date other than the earliest
                short = short.append({
                    "date": date, 
                    "country": country, 
                    "total_vaccinations": pd.NA
                }, ignore_index=True)

#fill missing values with previous day values (this is OK since it is cumulative)
short = short.sort_values(['country', 'date'])
 
short.total_vaccinations = short.total_vaccinations.fillna(method='ffill')
 
# scale the number by log to make the color transitions smoother
vaccines = short.sort_values('date')
vaccines['log_scale'] = vaccines['total_vaccinations'].apply(lambda x : math.log2(x+1))
```

- China had the highest vaccination rates despite being the centre of the pandemc outbreak.
- In other countries the rate seems to be lagging  a little bit.

```{python}
countries = short.groupby('country')['total_vaccinations'].max().sort_values(ascending=False)[:10].index.tolist()

title = fill_title_and_subtitle("Vaccination Progress", "Rate of vaccination for top-10 vaccinated countries")

#title = ("Vaccination Progress") 
line_plots = []

for c in countries:
    vacc_data = short[short.country == c]
    line_plots.append(
        go.Scatter(
            name = c,
            x = vacc_data.date,
            mode='lines+markers',
            y=vacc_data['total_vaccinations'],
            )
        )

fig = go.Figure(line_plots)

fig.update_layout(
    title =title,
    yaxis_title="Count",
    hovermode='x',
    legend_orientation='h')
```

# Cumulative Statistics 

```{python}
from datetime import datetime
vaccs=vaccine_df.copy()
daily=daily_df.copy()
daily.head()
# standardise the dates 
vaccs.date =vaccs.date.apply(lambda x: datetime.strptime(x, "%Y-%m-%d"))
daily.date =daily.date.apply(lambda x: datetime.strptime(x, "%Y-%m-%d"))
 
# use only common countries and dates 
countries = vaccs.dropna(subset=['daily_vaccinations'])['country'].unique()
dates = vaccs.dropna(subset=['daily_vaccinations'])['date'].unique()
country_mask = daily.country.apply(lambda x: x in countries)
date_mask = daily.date.apply(lambda x: x in dates)
 
# generate the visualization data 
columns_to_sum = ['daily_new_cases', 'cumulative_total_cases', 'cumulative_total_deaths', 'active_cases']
daily_cases = daily[country_mask & date_mask].groupby('date')[columns_to_sum].sum()
daily_vaccs = vaccs.groupby('date')[[ 'daily_vaccinations']].sum()
 
# make it a dataframe for convenience  
data = pd.DataFrame(daily_cases).join(pd.DataFrame(daily_vaccs))
 
# bring back the vaccine data we prepared in the previous section 
cumulative_vaccines = pd.DataFrame(vaccines.groupby('date')['total_vaccinations'].sum())
data = data.join(cumulative_vaccines).reset_index()
```


# Vaccination vs Cases 
```{python}
title = fill_title_and_subtitle("Vaccine vs Virus", "Comparing the total number of daily new cases and daily vaccinations globally")
fig = go.Figure(data=[
                go.Bar(
                    name="New Cases",
                    x=data['date'], 
                    y=data['daily_new_cases'],
                    marker_color="crimson",
                ),
                go.Bar(
                    name="Vaccinated",
                    x=data['date'], 
                    y=data['daily_vaccinations'],
                    marker_color="lightseagreen"
                ),
 
            ])
 
fig.update_layout(
        title=title,
        xaxis_title="Date",
        yaxis_title="Count",
        plot_bgcolor='rgba(0,0,0,0)',
        barmode='stack',
        hovermode="x"
    )
 
fig.show()
```

According to the graph above, as the Covd-19 vaccination rates increases, the prevalence of new cases is drastically low, indicating the effectiveness of Covd-19 in mitigating the severe impacts of the pandemic.

# Conclusion 

The hypothesis H0 = Covid-19 vaccines has an reduced the deathrates related to Covid-19 infection is true 
According to the graphh below, although Covid-19 Cases were increasing, the more the people got vaccinated, led to a reduction in death-rates. 

However, vaccines were not the only contributing factor to mitigating the fatalities of the pandemic. The national lockdowns, quarrantines and wearing of masks and community hygiene also played a pivotal role.


# Call to Action 
Vaccines have proven to be quite effective in harnessing pandemics, However the inception faces a lot resistance from the public, therefore more awareness programs should be put in place so that acceptance is high and fatalities are reduced. 




```{python}
title = fill_title_and_subtitle("The Race Against Covid", "Visualizing Cumulative Statistics of Disease vs Vaccine")
 
fig = go.Figure(data=[
                go.Scatter(
                    mode="lines+markers",
                    name="Total Deaths",
                    x=data['date'], 
                    y=data['cumulative_total_deaths'],
                    marker_color="crimson",
                ),
                go.Scatter(
                    mode="lines+markers",
                    name="Total Cases",
                    x=data['date'], 
                    y=data['cumulative_total_cases'],
                    marker_color="royalblue"
                ),

                go.Scatter(
                    mode="lines+markers",
                    name="Total Vaccinated",
                    x=data['date'], 
                     y=data['daily_vaccinations'],
                    marker_color="lightseagreen"
                ),
            ])
 
fig.update_layout(
        title = title,
        xaxis_title="",
        yaxis_title="Count",
        hovermode="x",
    legend_orientation='h'
)
fig.show()
```


